// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	backend "github.com/GlintPay/gccs/backend"
	api "github.com/poblish/promenade/api"

	config "github.com/GlintPay/gccs/config"

	mock "github.com/stretchr/testify/mock"
)

// Backend is an autogenerated mock type for the Backend type
type Backend struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Backend) Close() {
	_m.Called()
}

// GetCurrentState provides a mock function with given fields: refresh
func (_m *Backend) GetCurrentState(refresh bool) (*backend.State, error) {
	ret := _m.Called(refresh)

	var r0 *backend.State
	if rf, ok := ret.Get(0).(func(bool) *backend.State); ok {
		r0 = rf(refresh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backend.State)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(refresh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: _a0, metrics
func (_m *Backend) Init(_a0 config.ApplicationConfiguration, metrics api.PrometheusMetrics) error {
	ret := _m.Called(_a0, metrics)

	var r0 error
	if rf, ok := ret.Get(0).(func(config.ApplicationConfiguration, api.PrometheusMetrics) error); ok {
		r0 = rf(_a0, metrics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBackend interface {
	mock.TestingT
	Cleanup(func())
}

// NewBackend creates a new instance of Backend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBackend(t mockConstructorTestingTNewBackend) *Backend {
	mock := &Backend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
