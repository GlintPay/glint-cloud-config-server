// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	backend "github.com/GlintPay/gccs/backend"
	mock "github.com/stretchr/testify/mock"
)

// File is an autogenerated mock type for the File type
type File struct {
	mock.Mock
}

// Data provides a mock function with given fields:
func (_m *File) Data() backend.Blob {
	ret := _m.Called()

	var r0 backend.Blob
	if rf, ok := ret.Get(0).(func() backend.Blob); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(backend.Blob)
		}
	}

	return r0
}

// FullyQualifiedName provides a mock function with given fields:
func (_m *File) FullyQualifiedName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *File) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewFile interface {
	mock.TestingT
	Cleanup(func())
}

// NewFile creates a new instance of File. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFile(t mockConstructorTestingTNewFile) *File {
	mock := &File{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
